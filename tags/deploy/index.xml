<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>deploy on frikyfriky11</title><link>https://frikyfriky11.github.io/tags/deploy/</link><description>Recent content in deploy on frikyfriky11</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 21 Nov 2023 23:22:39 +0100</lastBuildDate><atom:link href="https://frikyfriky11.github.io/tags/deploy/index.xml" rel="self" type="application/rss+xml"/><item><title>About Docker containers, compose projects, anonymous volumes and unrecognized changes</title><link>https://frikyfriky11.github.io/posts/about-docker-containers-compose-projects-anonymous-volumes-unrecognized-changes/</link><pubDate>Tue, 21 Nov 2023 23:22:39 +0100</pubDate><guid>https://frikyfriky11.github.io/posts/about-docker-containers-compose-projects-anonymous-volumes-unrecognized-changes/</guid><description>Today I spent a couple of hours trying to help a Data Engineering coworker find some nasty bug that was in hiding into one of our company workloads that are deployed using Docker.
TLDR Link to heading A Docker deployment bug caused files not to update despite successful builds. It stemmed from an inherited VOLUME directive creating an anonymous volume, persisting changes. Solution: Add docker compose down -v in the deployment pipeline before docker compose up.</description></item></channel></rss>